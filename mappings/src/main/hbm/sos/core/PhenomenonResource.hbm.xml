<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright ${year} 52Â°North Initiative for Geospatial Open Source Software GmbH Licensed under the Apache License, Version 
    2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License 
    at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed 
    under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
    See the License for the specific language governing permissions and limitations under the License. -->
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="org.n52.series.db.beans">
    <class name="PhenomenonEntity" table="observableproperty">
        <comment>Table to store the ObservedProperty/Phenomenon information. Mapping file:
            mapping/core/ObservableProperty.hbm.xml</comment>
        <id name="pkid" type="long">
            <column name="pkid">
                <comment>Table primary key, used for relations</comment>
            </column>
            <generator class="native">
                <param name="sequence">observableProperty_seq</param>
            </generator>
        </id>

        <many-to-one name="service" class="ServiceEntity" foreign-key="phenomenonServiceFk">
            <column name="service" not-null="true" />
        </many-to-one>

        <many-to-one name="codespace" class="CodespaceEntity" foreign-key="phenCodespaceEntityIdentifierFk">
            <column name="codespace">
                <comment>Relation/foreign key to the codespace table. Contains the gml:identifier codespace. Optional</comment>
            </column>
        </many-to-one>

        <many-to-one name="codespaceName" class="CodespaceEntity" foreign-key="phenCodespaceEntityNameFk">
            <column name="codespaceName">
                <comment>Relation/foreign key to the codespace table. Contains the gml:name codespace. Optional</comment>
            </column>
        </many-to-one>

        <property name="domainId" type="string">
            <column name="domainId" not-null="true" unique-key="phenIdentifierUK">
                <comment>The identifier of the observableProperty, gml:identifier. Used as parameter for queries. Unique</comment>
            </column>
        </property>

        <property name="name" type="string">
            <column name="name">
                <comment>The name of the observableProperty, gml:name. Optional</comment>
            </column>
        </property>

        <property name="description" type="string">
            <column name="description">
                <comment>Description of the observableProperty, gml:description. Optional</comment>
            </column>
        </property>

        <property name="disabled" type="org.hibernate.type.TrueFalseType">
            <column name="disabled" not-null="true" default="'F'" check="disabled in ('T','F')">
                <comment>For later use by the SOS. Indicator if this observableProperty should not be provided by the
                    SOS.</comment>
            </column>
        </property>

        <property name="hiddenChild" type="org.hibernate.type.TrueFalseType">
            <column name="hiddenChild" not-null="true" default="'F'" check="hiddenChild in ('T','F')" />
        </property>

        <set name="children" table="compositephenomenon" inverse="false">
            <comment>Relation table to store observableProperty hierarchies, aka compositePhenomenon. E.g. define a
                parent in a query and all childs are also contained in the response. Mapping file:
                mapping/transactional/TObservableProperty.hbm.xml</comment>
            <key>
                <column name="parent" not-null="true">
                    <comment>Foreign Key (FK) to the related parent observableProperty. Contains
                        "observableProperty".observablePropertyid</comment>
                </column>
            </key>
            <many-to-many class="PhenomenonEntity" foreign-key="phenChildFk">
                <column name="child" not-null="true">
                    <comment>Foreign Key (FK) to the related child observableProperty. Contains
                        "observableProperty".observablePropertyid</comment>
                </column>
            </many-to-many>
        </set>

        <set name="parents" table="compositephenomenon" inverse="false">
            <key>
                <column name="child" not-null="true" />
            </key>
            <many-to-many class="PhenomenonEntity" foreign-key="phenParentFk">
                <column name="parent" not-null="true" />
            </many-to-many>
        </set>

        <set name="translations" table="i18nphenomenon" inverse="true" fetch="select">
            <key column="phenomenon" foreign-key="phentransphenfk" />
            <many-to-many unique="true" column="pkid" class="org.n52.series.db.beans.i18n.I18nPhenomenonEntity"
                foreign-key="phentransi18nfk" />
        </set>
    </class>

    <class name="org.n52.series.db.beans.i18n.I18nPhenomenonEntity" table="i18nphenomenon">
        <id name="pkid" type="long">
            <column name="pkid" />
            <generator class="native">
                <param name="sequence">i18nphenomenon_seq</param>
            </generator>
        </id>

        <property name="locale" type="string" />
        <property name="name" type="string" />
        <property name="description" type="string" />
    </class>
</hibernate-mapping>
